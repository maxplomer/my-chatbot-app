{"version":3,"sources":["Chatbot.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chatbot","botMessage","action","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","date","Date","messages","author","text","textInput","React","createRef","submitChatForm","bind","assertThisInitialized","event","preventDefault","userMessage","current","value","push","setState","chatbotReponse","talk","messageStyle","padding","react_default","a","createElement","className","toString","map","message","index","key","style","onSubmit","type","ref","required","width","margin","marginLeft","cursor","src","logo","alt","href","target","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"oRAMeA,wGAJX,MAAO,CAACC,WAAY,4CAAmCC,OAAQ,gBCyFpDC,cArFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,IAAIC,KACVC,SAAU,CACR,CAACC,OAAQ,MAAOC,KAAM,+BACtB,CAACD,OAAQ,OAAQC,KAAM,kBACvB,CAACD,OAAQ,MAAOC,KAAM,iCAG1BZ,EAAKa,UAAYC,IAAMC,YACvBf,EAAKgB,eAAiBhB,EAAKgB,eAAeC,KAApBhB,OAAAiB,EAAA,EAAAjB,QAAAiB,EAAA,EAAAjB,CAAAD,KAXLA,mFAejBG,KAAKR,QAAU,IAAIA,yCAGNwB,GACbA,EAAMC,iBAGN,IAAIV,EAAWP,KAAKI,MAAMG,SACtBW,EAAclB,KAAKU,UAAUS,QAAQC,MACzCpB,KAAKU,UAAUS,QAAQC,MAAQ,GAC/Bb,EAASc,KAAK,CAACb,OAAQ,OAAQC,KAAMS,IACrClB,KAAKsB,SAAS,CACZf,SAAUA,IAIZ,IAAIgB,EAAiBvB,KAAKR,QAAQgC,KAAKN,GAEvC,OAAOK,EAAe7B,QACpB,IAAK,kBAGL,IAAK,wBAGL,IAAK,yBAEH,MACF,QACEa,EAASc,KAAK,CAACb,OAAQ,MAAOC,KAAMc,EAAe9B,aACnDO,KAAKsB,SAAS,CACZf,SAAUA,sCAMhB,IAEIkB,EAAe,CAACC,QAAS,YAE7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZ9B,KAAKI,MAAMC,KAAK0B,WAChB/B,KAAKI,MAAMG,SAASyB,IAAI,SAASC,EAASC,GACzC,OAAQP,EAAAC,EAAAC,cAAA,OAAKM,IAAKD,EAAOJ,UAAWG,EAAQzB,OAAQ4B,MAAOX,GAAcE,EAAAC,EAAAC,cAAA,YAAOI,EAAQxB,SAE1FkB,EAAAC,EAAAC,cAAA,QAAMQ,SAAUrC,KAAKa,gBACnBc,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOC,IAAKvC,KAAKU,UAAW8B,UAAQ,EAACJ,MAXlC,CAACK,MAAO,MAAOf,QAAS,MAAOgB,OAAQ,YAYtDf,EAAAC,EAAAC,cAAA,UAAQS,KAAK,SAASF,MAXN,CAACV,QAAS,WAAYiB,WAAY,OAAQC,OAAQ,YAWlE,SAEFjB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKgB,IAAKC,IAAMhB,UAAU,WAAWiB,IAAI,SACzCpB,EAAAC,EAAAC,cAAA,mCAGAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVkB,KAAK,8BACLC,OAAO,SACPC,IAAI,uBAJN,sBAxEQC,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.a133a815.chunk.js","sourcesContent":["class Chatbot {\n  talk() {\n    return {botMessage: \"this is the bot message 5678 ðŸ¤–\", action: null};\n  }\n}\n\nexport default Chatbot;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chatbot from './Chatbot';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      date: new Date(),\n      messages: [\n        {author: \"bot\", text: \"helloworld1234 ðŸ¤–\"},\n        {author: \"user\", text: \"helloworld5678\"},\n        {author: \"bot\", text: \"helloworld9012 ðŸ¤–\"}\n      ]\n    };\n    this.textInput = React.createRef();\n    this.submitChatForm = this.submitChatForm.bind(this);\n  }\n\n  componentDidMount() {\n    this.Chatbot = new Chatbot();\n  }\n\n  submitChatForm(event) {\n    event.preventDefault();\n\n    //Add user message to state\n    let messages = this.state.messages;\n    let userMessage = this.textInput.current.value;\n    this.textInput.current.value = \"\";\n    messages.push({author: \"user\", text: userMessage});\n    this.setState({\n      messages: messages\n    });\n\n    //Call chatbot\n    let chatbotReponse = this.Chatbot.talk(userMessage);\n\n    switch(chatbotReponse.action) {\n      case 'showContactForm':\n\n        break;\n      case 'showCreateProjectForm':\n\n        break;\n      case 'showPortfolioSlideshow':\n\n        break;\n      default:\n        messages.push({author: \"bot\", text: chatbotReponse.botMessage});\n        this.setState({\n          messages: messages\n        });\n    }\n  }\n\n  render() {\n    var textInputStyle = {width: '50%', padding: '5px', margin: '20px 0'};\n    var sendButtonStyle = {padding: '5px 10px', marginLeft: '10px', cursor: 'pointer'};\n    var messageStyle = {padding: '5px 10px'};\n\n    return (\n      <div className=\"App\">\n        {this.state.date.toString()}\n        {this.state.messages.map(function(message, index) {\n          return (<div key={index} className={message.author} style={messageStyle}><span>{message.text}</span></div>);\n        })}\n        <form onSubmit={this.submitChatForm}>\n          <input type=\"text\" ref={this.textInput} required style={textInputStyle}/>\n          <button type=\"submit\" style={sendButtonStyle}>Send</button>\n        </form>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Max Plomer Chatbot App\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://maxplomer.github.io\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Portfolio\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}